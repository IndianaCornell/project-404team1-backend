openapi: 3.0.0
info:
  title: Foodies API
  version: "1.0.0"
  description: >
    API для керування рецептами, користувачами, улюбленими та підписками.
    Використовує JWT авторизацію.

servers:
  - url: http://localhost:3000/api
    description: Local server


tags:
  - name: Auth
    description: Реєстрація та авторизація користувачів
  - name: Users
    description: Керування профілями користувачів
  - name: Recipes
    description: CRUD для рецептів
  - name: Categories
    description: Категорії страв
  - name: Areas
    description: Регіони походження страв
  - name: Ingredients
    description: Інгредієнти для рецептів
  - name: Favorites
    description: Улюблені рецепти
  - name: Subscriptions
    description: Підписки між користувачами
  - name: Reviews
    description: Відгуки на рецепти

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Реєстрація користувача
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Успішна реєстрація
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /auth/login:
    post:
      tags: [Auth]
      summary: Логін користувача
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Успішний логін
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /users/me:
    get:
      tags: [Users]
      summary: Отримати профіль поточного користувача
      responses:
        "200":
          description: Інформація про користувача
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    patch:
      tags: [Users]
      summary: Оновити профіль
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: Оновлено

  /users/{id}:
    get:
      tags: [Users]
      summary: Отримати інформацію про іншого користувача
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          description: Інформація про користувача
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /categories:
    get:
      tags: [Categories]
      summary: Отримати всі категорії рецептів
      security: []
      responses:
        "200":
          description: Список категорій
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"

  /recipes:
    get:
      tags: [Recipes]
      summary: Пошук рецептів з фільтрами та пагінацією
      security: []
      parameters:
        - $ref: "#/components/parameters/CategoryParam"
        - $ref: "#/components/parameters/IngredientParam"
        - $ref: "#/components/parameters/AreaParam"
        - $ref: "#/components/parameters/SearchParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        "200":
          description: Пагінований список рецептів
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedRecipes"
    post:
      tags: [Recipes]
      summary: Створити новий рецепт
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecipeRequest"
      responses:
        "201":
          description: Рецепт створено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"

  /recipes/popular:
    get:
      tags: [Recipes]
      summary: Отримати популярні рецепти
      security: []
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        "200":
          description: Пагінований список популярних рецептів
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedRecipes"

  /recipes/my:
    get:
      tags: [Recipes]
      summary: Отримати рецепти поточного користувача
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        "200":
          description: Пагінований список власних рецептів
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedRecipes"

  /recipes/{id}:
    get:
      tags: [Recipes]
      summary: Деталі рецепта
      security: []
      parameters:
        - $ref: "#/components/parameters/RecipeId"
      responses:
        "200":
          description: Об'єкт рецепта
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
        "404":
          description: Рецепт не знайдено
    delete:
      tags: [Recipes]
      summary: Видалити власний рецепт
      parameters:
        - $ref: "#/components/parameters/RecipeId"
      responses:
        "204":
          description: Рецепт видалено
        "403":
          description: Можна видаляти лише власні рецепти
        "404":
          description: Рецепт не знайдено

  /recipes/{id}/favorite:
    post:
      tags: [Favorites]
      summary: Додати рецепт в улюблені
      parameters:
        - $ref: "#/components/parameters/RecipeId"
      responses:
        "200":
          description: Рецепт додано до улюблених
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Recipe added to favorites
        "404":
          description: Рецепт не знайдено
    delete:
      tags: [Favorites]
      summary: Видалити рецепт з улюблених
      parameters:
        - $ref: "#/components/parameters/RecipeId"
      responses:
        "200":
          description: Рецепт видалено з улюблених
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Recipe removed from favorites

  /favorites:
    get:
      tags: [Favorites]
      summary: Отримати улюблені рецепти користувача
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/LimitParam"
      responses:
        "200":
          description: Пагінований список улюблених рецептів
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedRecipes"

  /recipes/{id}/reviews:
    get:
      tags: [Reviews]
      summary: Отримати відгуки
      security: []
      parameters:
        - $ref: "#/components/parameters/RecipeId"
      responses:
        "200":
          description: Масив відгуків
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
    post:
      tags: [Reviews]
      summary: Додати відгук
      parameters:
        - $ref: "#/components/parameters/RecipeId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewRequest"
      responses:
        "201":
          description: Відгук додано

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UserId:
      in: path
      name: id
      required: true
      schema: { type: string }
    RecipeId:
      in: path
      name: id
      required: true
      schema: { type: string }
    CategoryParam:
      in: query
      name: category
      schema: { type: string }
      description: Фільтр за категорією
    IngredientParam:
      in: query
      name: ingredient
      schema: { type: string }
      description: Фільтр за інгредієнтом
    AreaParam:
      in: query
      name: area
      schema: { type: string }
      description: Фільтр за регіоном
    SearchParam:
      in: query
      name: q
      schema: { type: string }
      description: Текстовий пошук по назві, опису та інструкціях
    PageParam:
      in: query
      name: page
      schema: { type: integer, minimum: 1, default: 1 }
      description: Номер сторінки
    LimitParam:
      in: query
      name: limit
      schema: { type: integer, minimum: 1, maximum: 100, default: 12 }
      description: Кількість елементів на сторінці

  schemas:
    RegisterRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: secret123
        name:
          type: string
          example: Ivan

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: secret123

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: jwt_token_here
        user:
          $ref: "#/components/schemas/User"

    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        avatar:
          type: string
        followers:
          type: array
          items:
            type: string
        following:
          type: array
          items:
            type: string
        favorites:
          type: array
          items:
            type: string

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        avatar:
          type: string

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Pasta

    Recipe:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: Classic Spaghetti Carbonara
        category:
          type: string
          example: Pasta
        area:
          type: string
          example: Italian
        instructions:
          type: string
        description:
          type: string
        thumb:
          type: string
          format: uri
        time:
          type: string
          example: 20 minutes
        owner:
          type: string
        favoritesCount:
          type: integer
          minimum: 0
          example: 15
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    RecipeRequest:
      type: object
      required: [title, category]
      properties:
        title:
          type: string
          example: Classic Spaghetti Carbonara
        category:
          type: string
          example: Pasta
        area:
          type: string
          example: Italian
        instructions:
          type: string
        description:
          type: string
        thumb:
          type: string
          format: uri
        time:
          type: string
          example: 20 minutes

    PaginatedRecipes:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Recipe"
        total:
          type: integer
          example: 150
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 12

    RecipeIngredient:
      type: object
      properties:
        ingredient_id: { type: string }
        quantity: { type: string }

    Review:
      type: object
      properties:
        id: { type: string }
        user_id: { type: string }
        content: { type: string }
        rating:
          type: integer
          minimum: 1
          maximum: 5
        created_at:
          type: string
          format: date-time

    ReviewRequest:
      type: object
      required: [rating, content]
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        content:
          type: string

# Global security for all endpoints except those explicitly marked with security: []
security:
  - bearerAuth: []
